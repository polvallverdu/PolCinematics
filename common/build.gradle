plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/polcinematics.accesswidener")
}

configurations {
    shadowImplementation.extendsFrom implementation
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"

    // Config stuff
    //modImplementation("com.electronwill.night-config:core:3.6.5")
    //modImplementation("com.electronwill.night-config:json:3.6.5")
    implementation 'com.google.code.gson:gson:2.10.1'

    // MediaExtractor
    // shadow(implementation("com.github.polvallverdu:MediaExtractor-PolCinematics:${rootProject.mediaextractor_commit}"))
    // shadow(implementation("dev.polv:MediaExtractor:0.3.2"))
    modApi("com.github.polvallverdu.FancyVideo-API-PolCinematics:fancyvideo:${rootProject.fancyvideo_api}")
    implementation("uk.co.caprica:vlcj:${rootProject.vlcj_version}") // vlcJ

    // Embedded Chromium (jcef)
    modApi("com.github.polvallverdu.MCEF-PolCinematics:mcef:${rootProject.mcef_api}")

    // Apache Commons
    // https://mvnrepository.com/artifact/org.apache.commons/commons-numbers-core
    // implementation 'org.apache.commons:commons-numbers-core:1.1'
    // implementation 'org.apache.commons:commons-lang3:3.0'

    // PolTaskManager
    implementation("dev.polv:PolTaskManager:${rootProject.taskmanager_version}")
    shadowImplementation("dev.polv:PolTaskManager:${rootProject.taskmanager_version}")
}

shadowJar {
    configurations = [
            project.configurations.shadowImplementation
    ]
    classifier "dev-shadow"

    relocate("dev.polv.taskmanager", "polcinematics.taskmanager")

    minimize()
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}


