plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "polcinematics-common-client.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
    shadowImplementation
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    /*shadow(implementation("dev.polv:MediaExtractor:0.2.2"))
    shadow(implementation("org.bytedeco:javacv-platform:1.5.8"))
    shadow(implementation("org.bytedeco:ffmpeg-platform:5.1.2-1.5.8"))*/

    modApi("com.github.polvallverdu.FancyVideo-API-PolCinematics:fancyvideo-forge:${rootProject.fancyvideo_api}")
    modApi("com.github.polvallverdu.MCEF-PolCinematics:mcef-forge:${rootProject.mcef_api}")

    shadowImplementation(minecraftLibraries("dev.polv:PolTaskManager:${rootProject.taskmanager_version}"))

    //////////// TESTING MODS ////////////
    // None yet
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    // For some reason intellij and kotlin stuff is included in the shadow jar
    exclude 'org/**'
    exclude 'kotlin/**'

    configurations = [project.configurations.shadowCommon, project.configurations.shadowImplementation]
    classifier "dev-shadow"

    relocate("dev.polv.taskmanager", "dev.polv.libs.taskmanager")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
